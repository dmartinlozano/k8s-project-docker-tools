apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "gitbucket.fullname" . }}
  labels:
    app: {{ template "gitbucket.name" . }}
    chart: {{ template "gitbucket.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "gitbucket.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "gitbucket.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
        - name: chown-data-volume
          image: alpine
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["chown", "1000:1000", "-R", "/var/gitbucket"]
          volumeMounts:
          - name: data-volume
            mountPath: /var/gitbucket
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data-volume
              mountPath: /var/gitbucket
{{- if eq .Values.configFromMap.enabled true }}
            - name: config-volume
              mountPath: /var/gitbucket/gitbucket.conf
              subPath: GITBUCKET_CONF
{{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: ssh
              containerPort: 29418
              protocol: TCP
          env:
{{- if .Values.externalDatabase.url }}
            - name: GITBUCKET_DB_URL
              value: {{ .Values.externalDatabase.url }}
{{- end }}
{{- if .Values.externalDatabase.user }}
            - name: GITBUCKET_DB_USER
              value: {{ .Values.externalDatabase.user }}
{{- end }}
{{- if .Values.externalDatabase.password }}
            - name: GITBUCKET_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "gitbucket.fullname" . }}
                  key: externalDatabasePassword
{{- end }}
{{- if .Values.externalDatabase.existingSecret }}
            - name: GITBUCKET_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: {{ .Values.externalDatabase.existingSecretKey }}
{{- end }}
{{- if .Values.javavm.options }}
            - name: JAVA_OPTS
              value: {{ .Values.javavm.options }}
{{- end }}
{{- if .Values.gitbucket.options }}
            - name: GITBUCKET_OPTS
              value: {{ .Values.gitbucket.options }}
{{- end }}
{{- if .Values.gitbucket.base_url }}
            - name: GITBUCKET_BASE_URL
              value: {{ .Values.gitbucket.base_url }}
{{- end }}
          livenessProbe:
            httpGet:
              path: /signin
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /signin
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 15
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: {{ if .Values.persistentVolume.existingClaim }}{{ .Values.persistentVolume.existingClaim }}{{- else }}{{ template "gitbucket.fullname" . }}{{- end }}
{{- if eq .Values.configFromMap.enabled true }}
        - name: config-volume
          configMap:
            name: {{ .Values.configFromMap.name}}
{{- end }}
